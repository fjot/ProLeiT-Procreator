import * as tslib_1 from "tslib";
import { Injectable, Optional, Inject, NgZone } from '@angular/core';
import { ApolloClient, } from 'apollo-client';
import { from } from 'rxjs';
import { QueryRef } from './QueryRef';
import { APOLLO_OPTIONS } from './tokens';
import { fromPromise, wrapWithZone, fixObservable } from './utils';
export class ApolloBase {
    constructor(ngZone, _client) {
        this.ngZone = ngZone;
        this._client = _client;
    }
    watchQuery(options) {
        return new QueryRef(this.client.watchQuery(Object.assign({}, options)), this.ngZone);
    }
    query(options) {
        return fromPromise(() => this.client.query(Object.assign({}, options)));
    }
    mutate(options) {
        return fromPromise(() => this.client.mutate(Object.assign({}, options)));
    }
    subscribe(options, extra) {
        const obs = from(fixObservable(this.client.subscribe(Object.assign({}, options))));
        return extra && extra.useZone !== true
            ? obs
            : wrapWithZone(obs, this.ngZone);
    }
    getClient() {
        return this._client;
    }
    setClient(client) {
        if (this._client) {
            throw new Error('Client has been already defined');
        }
        this._client = client;
    }
    get client() {
        this.beforeEach();
        return this._client;
    }
    beforeEach() {
        this.checkInstance();
    }
    checkInstance() {
        if (!this._client) {
            throw new Error('Client has not been defined yet');
        }
    }
}
let Apollo = class Apollo extends ApolloBase {
    constructor(_ngZone, apolloOptions) {
        super(_ngZone);
        this._ngZone = _ngZone;
        this.map = new Map();
        if (apolloOptions) {
            this.createDefault(apolloOptions);
        }
    }
    create(options, name) {
        if (name && name !== 'default') {
            this.createNamed(name, options);
        }
        else {
            this.createDefault(options);
        }
    }
    default() {
        return this;
    }
    use(name) {
        if (name === 'default') {
            return this.default();
        }
        return this.map.get(name);
    }
    createDefault(options) {
        if (this.getClient()) {
            throw new Error('Apollo has been already created.');
        }
        return this.setClient(new ApolloClient(options));
    }
    createNamed(name, options) {
        if (this.map.has(name)) {
            throw new Error(`Client ${name} has been already created`);
        }
        this.map.set(name, new ApolloBase(this._ngZone, new ApolloClient(options)));
    }
};
Apollo = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(1, Optional()),
    tslib_1.__param(1, Inject(APOLLO_OPTIONS)),
    tslib_1.__metadata("design:paramtypes", [NgZone, Object])
], Apollo);
export { Apollo };
//# sourceMappingURL=data:application/json;base64,