import * as tslib_1 from "tslib";
import { Injectable, Optional, Inject, NgZone } from '@angular/core';
import { ApolloClient, } from 'apollo-client';
import { from } from 'rxjs';
import { QueryRef } from './QueryRef';
import { APOLLO_OPTIONS } from './tokens';
import { fromPromise, wrapWithZone, fixObservable } from './utils';
var ApolloBase = /** @class */ (function () {
    function ApolloBase(ngZone, _client) {
        this.ngZone = ngZone;
        this._client = _client;
    }
    ApolloBase.prototype.watchQuery = function (options) {
        return new QueryRef(this.client.watchQuery(tslib_1.__assign({}, options)), this.ngZone);
    };
    ApolloBase.prototype.query = function (options) {
        var _this = this;
        return fromPromise(function () {
            return _this.client.query(tslib_1.__assign({}, options));
        });
    };
    ApolloBase.prototype.mutate = function (options) {
        var _this = this;
        return fromPromise(function () {
            return _this.client.mutate(tslib_1.__assign({}, options));
        });
    };
    ApolloBase.prototype.subscribe = function (options, extra) {
        var obs = from(fixObservable(this.client.subscribe(tslib_1.__assign({}, options))));
        return extra && extra.useZone !== true
            ? obs
            : wrapWithZone(obs, this.ngZone);
    };
    ApolloBase.prototype.getClient = function () {
        return this._client;
    };
    ApolloBase.prototype.setClient = function (client) {
        if (this._client) {
            throw new Error('Client has been already defined');
        }
        this._client = client;
    };
    Object.defineProperty(ApolloBase.prototype, "client", {
        get: function () {
            this.beforeEach();
            return this._client;
        },
        enumerable: true,
        configurable: true
    });
    ApolloBase.prototype.beforeEach = function () {
        this.checkInstance();
    };
    ApolloBase.prototype.checkInstance = function () {
        if (!this._client) {
            throw new Error('Client has not been defined yet');
        }
    };
    return ApolloBase;
}());
export { ApolloBase };
var Apollo = /** @class */ (function (_super) {
    tslib_1.__extends(Apollo, _super);
    function Apollo(_ngZone, apolloOptions) {
        var _this = _super.call(this, _ngZone) || this;
        _this._ngZone = _ngZone;
        _this.map = new Map();
        if (apolloOptions) {
            _this.createDefault(apolloOptions);
        }
        return _this;
    }
    Apollo.prototype.create = function (options, name) {
        if (name && name !== 'default') {
            this.createNamed(name, options);
        }
        else {
            this.createDefault(options);
        }
    };
    Apollo.prototype.default = function () {
        return this;
    };
    Apollo.prototype.use = function (name) {
        if (name === 'default') {
            return this.default();
        }
        return this.map.get(name);
    };
    Apollo.prototype.createDefault = function (options) {
        if (this.getClient()) {
            throw new Error('Apollo has been already created.');
        }
        return this.setClient(new ApolloClient(options));
    };
    Apollo.prototype.createNamed = function (name, options) {
        if (this.map.has(name)) {
            throw new Error("Client " + name + " has been already created");
        }
        this.map.set(name, new ApolloBase(this._ngZone, new ApolloClient(options)));
    };
    Apollo = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(1, Optional()),
        tslib_1.__param(1, Inject(APOLLO_OPTIONS)),
        tslib_1.__metadata("design:paramtypes", [NgZone, Object])
    ], Apollo);
    return Apollo;
}(ApolloBase));
export { Apollo };
//# sourceMappingURL=data:application/json;base64,